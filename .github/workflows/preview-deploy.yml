name: PR Preview Deployment

# Trigger on PR events: opened, updated (synchronize), reopened, or closed
on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

# Set permissions for the workflow
permissions:
  contents: write
  pull-requests: write
  pages: write
  id-token: write

# Cancel in-progress deployments for the same PR
concurrency:
  group: pr-preview-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # Build and deploy preview for open PRs
  build-and-deploy:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Prepare preview directory
        run: |
          # Create a directory structure for the preview
          mkdir -p preview/pr-${{ github.event.pull_request.number }}
          
          # Copy all site files to the preview directory
          # Using wildcard to include all HTML, CSS, and JS files
          cp *.html preview/pr-${{ github.event.pull_request.number }}/ 2>/dev/null || true
          cp *.css preview/pr-${{ github.event.pull_request.number }}/ 2>/dev/null || true
          cp *.js preview/pr-${{ github.event.pull_request.number }}/ 2>/dev/null || true
          
          echo "Preview prepared for PR #${{ github.event.pull_request.number }}"
          ls -la preview/pr-${{ github.event.pull_request.number }}/

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./preview
          destination_dir: .
          keep_files: true  # Keep other PR previews
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: 'Deploy preview for PR #${{ github.event.pull_request.number }}'

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            // For user/org pages (username.github.io), the URL is at the root domain
            const previewUrl = `https://${{ github.repository_owner }}.github.io/pr-${prNumber}/`;
            
            // Find existing preview comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Preview deployment')
            );
            
            const commentBody = `## ðŸš€ Preview Deployment
            
            Your preview deployment is ready!
            
            **Preview URL:** ${previewUrl}
            
            ---
            
            <sub>This preview will be automatically updated when you push new commits to this PR.</sub>
            <sub>Preview will be removed when the PR is closed or merged.</sub>`;
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
            }

  # Clean up preview when PR is closed
  cleanup:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages

      - name: Remove preview directory
        run: |
          # Remove the PR preview directory
          if [ -d "pr-${{ github.event.pull_request.number }}" ]; then
            rm -rf pr-${{ github.event.pull_request.number }}
            echo "Removed preview for PR #${{ github.event.pull_request.number }}"
          else
            echo "Preview directory not found, nothing to clean up"
          fi

      - name: Commit and push cleanup
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "Remove preview for PR #${{ github.event.pull_request.number }}"
            git push
            echo "Cleanup committed and pushed"
          else
            echo "No changes to commit"
          fi

      - name: Comment PR about cleanup
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `## ðŸ§¹ Preview Cleanup\n\nPreview deployment has been removed.`
            });
